#!/bin/bash
help(){
  echo -e "convert shadowsocks URI to .json file\n"
  echo "Usage:
      uri2json [Options]
Options:

      -u [URI]      The URI of the proxy. it starts with ss://
      -q [QR code]  The QR code to the URI
      -o [FILE]     output to a json file, FILE should not be ended with .json extension.
                    if this option was not specified, the output file name will be the tag in the URI.
      -h            This help message"
  exit "$1"
}

while getopts o:u:q:h:-: opt; do
  case "$opt" in
    o) tag=${OPTARG};;
    u) uri=${OPTARG}
       tag=$(echo -n "$uri" | cut -d'/' -f3 | cut -d'@' -f2 | awk -F'#' '{print $2}')
      ;;
    q) uri=$(zbarimg -q --raw "${OPTARG}")
       tag=$(echo -n "$uri" | cut -d'/' -f3 | cut -d'@' -f2 | awk -F'#' '{print $2}')
       ;;
    h) help 0;;
    -)
      case "${OPTARG}" in
        help) help 0;;
        output) tag=${!OPTIND}
                shift $((OPTIND - 1))
                ;;
        uri)    uri=${!OPTIND}
                tag=$(echo -n "$uri" | cut -d'/' -f3 | cut -d'@' -f2 | awk -F'#' '{print $2}')
                shift $((OPTIND - 1))
                ;;
        qrcode) uri=$(zbarimg -q --raw "${!OPTIND}")
                tag=$(echo -n "$uri" | cut -d'/' -f3 | cut -d'@' -f2 | awk -F'#' '{print $2}')
                shift $((OPTIND - 1))
                ;;
        *)      echo "Wrong Option"; help 1;;
      esac
      ;;
    *)      echo "Wrong Option"; help 1;;
  esac
done

if [ -n "$uri" ] && [[ "$uri" != ss://* ]]; then
  echo "Wrong URI" && help 1
elif [ -z "$uri" ]; then
  help 1
fi

if [[ "$tag" = *.json ]]; then
  echo "Do not specify the file extension. instead of example.json, enter example" && help 1
elif [ -z "$tag" ]; then
  echo -e "You Need to give a file name with -o option, without the .json extension\n"
  help 1
fi

if echo "$uri" | grep -q "@"; then
  method_and_pass=$(echo -n "$uri" | cut -d'/' -f3 | cut -d'@' -f1 | base64 --decode 2>/dev/null)
  method=$(echo -n "$method_and_pass" | cut -d':' -f1)
  pass=$(echo -n "$method_and_pass" | cut -d':' -f2)
  server_and_s_port=$(echo -n "$uri" | cut -d'/' -f3 | cut -d'@' -f2 | cut -d'#' -f1)
else
  method_pass_server_s_port=$(echo -n "$uri" | cut -d'/' -f3 | cut -d'#' -f1 | base64 --decode 2>/dev/null)
  method=$(echo -n "$method_pass_server_s_port" | cut -d':' -f1)
  pass=$(echo -n "$method_pass_server_s_port" | cut -d'@' -f 1 | cut -d':' -f2)
  server_and_s_port=$(echo -n "$method_pass_server_s_port" | cut -d'@' -f2)
fi
server=$(echo -n "$server_and_s_port" | cut -d':' -f1)
s_port=$(echo -n "$server_and_s_port" | cut -d':' -f2)

[ -n "$server" ] && [ -n "$s_port" ] && [ -n "$pass" ] && [ -n "$method" ] &&
cat << END >> "$tag.json" &&
{
    "server": "$server",
    "server_port": "$s_port",
    "local_address": "127.0.0.1",
    "local_port": "8388",
    "password": "$pass",
    "timeout": "600",
    "method": "$method",
    "fast_open": false
}
END
echo "$tag.json is now in the working directory"
