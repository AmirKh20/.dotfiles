#!/bin/bash
help(){
  echo -e "convert shadowsocks URI to .json file\n"
  echo "Usage:
      uri2json [Options]
Options:

      -u|--uri [URI]         The URI of the proxy. it starts with ss://
      -q|--qrcode [QR code]  The QR code to the URI
      -o|--output <FILE_NAME>     output to a json file, FILE_NAME should not be ended with .json extension. This can be also a path.
                    if this option was not specified, the output file name will be the tag in the URI. The tag in the URI starts with a # symbol.
      -i|--input  <path/to/file>    URIs listed line by line in a text file. Dont use this option with -o option, instead edit the tags in the input file.
      -h|--help                     Shows this help message

       if you want to change the local port and add other options to the json file, edit the last lines of this script."
  exit "$1"
}

while getopts o:u:q:i:h:-: opt; do
  case "$opt" in
    o) output_file=${OPTARG}
      ;;
    u) uri=${OPTARG}
       output_file=$(echo -n "$uri" | cut -d'/' -f3 | cut -d'@' -f2 | awk -F'#' '{print $2}')
      ;;
    q) uri=$(zbarimg -q --raw "${OPTARG}")
       output_file=$(echo -n "$uri" | cut -d'/' -f3 | cut -d'@' -f2 | awk -F'#' '{print $2}')
       ;;
    i)
       if [ -r "${OPTARG}" ]; then
         input_file=${OPTARG}
       else
         echo -e "file does not exist or not readable" && help 1
       fi

       while read -r LINE; do
         uri2json -u "${LINE}"
       done < "${input_file}"
       exit 0
       ;;

    h) help 0;;
    -)
      case "${OPTARG}" in
        help) help 0;;
        output) output_file=${!OPTIND}
                shift $((OPTIND - 1))
                ;;
        uri)    uri=${!OPTIND}
                output_file=$(echo -n "$uri" | cut -d'/' -f3 | cut -d'@' -f2 | awk -F'#' '{print $2}')
                shift $((OPTIND - 1))
                ;;
        qrcode) uri=$(zbarimg -q --raw "${!OPTIND}")
                output_file=$(echo -n "$uri" | cut -d'/' -f3 | cut -d'@' -f2 | awk -F'#' '{print $2}')
                shift $((OPTIND - 1))
                ;;
        input)
                if [ -r "${!OPTIND}" ]; then
                  input_file=${!OPTIND}
                else
                  echo -e "file does not exist or not readable" && help 1
                fi

                while read -r LINE; do
                  uri2json -u "${LINE}"
                done < "${input_file}"
                exit 0
                shift $((OPTIND - 1))
                ;;

        *)      echo "Wrong Option"; help 1;;
      esac
      ;;
  esac
done

if [ -n "$uri" ] && [[ "$uri" != ss://* ]]; then
  echo "Wrong URI" && help 1
elif [ -z "$uri" ]; then
  echo -e "specify the URI\n"
  help 1
fi

if [[ "$output_file" = *.json ]]; then
  echo "Do not specify the output file extension. instead of example.json, enter example" && help 1
elif [ -z "$output_file" ]; then
  echo -e "You Need to give a file name with -o option, without the .json extension\n"
  help 1
fi

if echo "$uri" | grep -q "@"; then
  method_and_pass=$(echo -n "$uri" | cut -d'/' -f3 | cut -d'@' -f1 | base64 --decode 2>/dev/null)
  method=$(echo -n "$method_and_pass" | cut -d':' -f1)
  pass=$(echo -n "$method_and_pass" | cut -d':' -f2)
  server_and_s_port=$(echo -n "$uri" | cut -d'/' -f3 | cut -d'@' -f2 | cut -d'#' -f1)
else
  method_pass_server_s_port=$(echo -n "$uri" | cut -d'/' -f3 | cut -d'#' -f1 | base64 --decode 2>/dev/null)
  method=$(echo -n "$method_pass_server_s_port" | cut -d':' -f1)
  pass=$(echo -n "$method_pass_server_s_port" | cut -d'@' -f 1 | cut -d':' -f2)
  server_and_s_port=$(echo -n "$method_pass_server_s_port" | cut -d'@' -f2)
fi
server=$(echo -n "$server_and_s_port" | cut -d':' -f1)
s_port=$(echo -n "$server_and_s_port" | cut -d':' -f2)

[ -n "$server" ] && [ -n "$s_port" ] && [ -n "$pass" ] && [ -n "$method" ] &&
cat << END >> "$output_file.json" &&
{
    "server": "$server",
    "server_port": "$s_port",
    "local_address": "127.0.0.1",
    "local_port": "8388",
    "password": "$pass",
    "timeout": "600",
    "method": "$method",
    "fast_open": false
}
END
echo "$output_file.json is now in the working directory"
